permissions:
  contents: write
name: Build Rust project on multiple platforms when a new release is created

on:
  release:
    types: [created]

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      FILE_NAME: nethsm-pkcs11-v${{ github.event.release.tag_name }}-windows.dll
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-x86_64-pc-windows-msvc

      - uses: Swatinem/rust-cache@v2

      - name: Build project
        run: cargo build --release

      - name: rename file
        run: mv target/release/nethsm_pkcs11.dll ${{ env.FILE_NAME }}

      - name: Upload to the release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.FILE_NAME }}

  build-macos:
    runs-on: macos-latest
    env:
      FILE_NAME: nethsm-pkcs11-v${{ github.event.release.tag_name }}-macos.dylib
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-x86_64-apple-darwin

      - uses: Swatinem/rust-cache@v2

      - name: Build project
        run: cargo build --release

      - name: rename file
        run: mv target/release/libnethsm_pkcs11.dylib ${{ env.FILE_NAME }}

      - name: Upload to the release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.FILE_NAME }}

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}

    strategy:
      matrix:
        os: ["ubuntu:22.04", "debian:12", "fedora:38", "alpine:3.18"]
        rust-version: [stable]

    env:
      FILE_NAME: nethsm-pkcs11-v${{ github.event.release.tag_name }}-${{ matrix.os }}.so
      HOME: /root
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: install dependencies
        run: |
          case ${{matrix.os}} in 
            ubuntu* | debian* )
              apt-get update
              apt-get install -y curl gcc
              ;;
            alpine*)
              apk add curl musl-dev gcc 
              echo RUSTFLAGS="-C target-feature=-crt-static" >> $GITHUB_ENV
              ;;
            fedora*)
              dnf install -y curl gcc
              ;;
          esac

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}

      - uses: Swatinem/rust-cache@v2

      - name: Build project
        run: cargo build --release

      - name: rename file
        run: mv target/release/libnethsm_pkcs11.so ${{ env.FILE_NAME }}

      - name: Upload to the release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.FILE_NAME }}

  upload-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
      - name: install cargo-license
        run: cargo install cargo-license

      - name: Generate licenses
        run: ./tools/collect_licenses.sh

      - name: rename file
        run: mv _LICENSE LICENSE

      - name: Upload to the release
        uses: softprops/action-gh-release@v1
        with:
          files: LICENSE
