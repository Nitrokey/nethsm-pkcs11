From 67fea160741ef5a5a42ef8be2ea0b5aeffac4441 Mon Sep 17 00:00:00 2001
From: Nils Ponsard | Nitrokey <nils@nitrokey.com>
Date: Tue, 1 Aug 2023 16:47:52 +0200
Subject: [PATCH] feat: async api

---
 openapi/src/apis/default_api.rs  | 71 ++++++++++++++++++++++++++++----
 openapi/src/models/public_key.rs |  4 +-
 2 files changed, 64 insertions(+), 11 deletions(-)

diff --git a/openapi/src/apis/default_api.rs b/openapi/src/apis/default_api.rs
index ce0eec1..a09e52e 100644
--- a/openapi/src/apis/default_api.rs
+++ b/openapi/src/apis/default_api.rs
@@ -8,7 +8,7 @@
  * Generated by: https://openapi-generator.tech
  */
 
-use reqwest;
+use reqwest::{self, header::HeaderValue};
 
 use super::{configuration, Error};
 use crate::apis::ResponseContent;
@@ -1449,7 +1449,7 @@ pub async fn info_get(
 pub async fn keys_generate_post(
     configuration: &configuration::Configuration,
     key_generate_request_data: crate::models::KeyGenerateRequestData,
-) -> Result<(), Error<KeysGeneratePostError>> {
+) -> Result<String, Error<KeysGeneratePostError>> {
     let local_var_configuration = configuration;
 
     let local_var_client = &local_var_configuration.client;
@@ -1473,11 +1473,30 @@ pub async fn keys_generate_post(
     let local_var_req = local_var_req_builder.build()?;
     let local_var_resp = local_var_client.execute(local_var_req).await?;
 
+    let response_headers = local_var_resp.headers().clone();
+
     let local_var_status = local_var_resp.status();
     let local_var_content = local_var_resp.text().await?;
 
+    let default = HeaderValue::from_static("unknown");
+
+    let location = response_headers.get("location").unwrap_or(&default);
+
+    // get the id from the logation header value :
+    // location: /api/v1/keys/<id>?mechanisms=ECDSA_Signature
+
+    let key_id = location
+        .to_str()
+        .unwrap_or("")
+        .split('/')
+        .last()
+        .unwrap_or("")
+        .split('?')
+        .next()
+        .unwrap_or("");
+
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        Ok(())
+        Ok(key_id.to_string())
     } else {
         let local_var_entity: Option<KeysGeneratePostError> =
             serde_json::from_str(&local_var_content).ok();
@@ -1602,6 +1621,13 @@ pub async fn keys_key_id_cert_get(
     let mut local_var_req_builder =
         local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
+    // Ask for a pem file
+
+    local_var_req_builder = local_var_req_builder.header(
+        reqwest::header::ACCEPT,
+        reqwest::header::HeaderValue::from_static("application/x-pem-file"),
+    );
+
     if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
         local_var_req_builder =
             local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
@@ -1620,7 +1646,7 @@ pub async fn keys_key_id_cert_get(
     let local_var_content = local_var_resp.text().await?;
 
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        serde_json::from_str(&local_var_content).map_err(Error::from)
+        Ok(local_var_content)
     } else {
         let local_var_entity: Option<KeysKeyIdCertGetError> =
             serde_json::from_str(&local_var_content).ok();
@@ -1661,7 +1687,15 @@ pub async fn keys_key_id_cert_put(
             local_var_auth_conf.1.to_owned(),
         );
     };
-    local_var_req_builder = local_var_req_builder.json(&body);
+
+    // set the cert file as the body
+
+    local_var_req_builder = local_var_req_builder.body(body.to_owned());
+
+    local_var_req_builder = local_var_req_builder.header(
+        reqwest::header::CONTENT_TYPE,
+        reqwest::header::HeaderValue::from_static("application/x-pem-file"),
+    );
 
     let local_var_req = local_var_req_builder.build()?;
     let local_var_resp = local_var_client.execute(local_var_req).await?;
@@ -1981,7 +2015,7 @@ pub async fn keys_key_id_public_pem_get(
 pub async fn keys_key_id_put(
     configuration: &configuration::Configuration,
     key_id: &str,
-    body: &str,
+    body: crate::models::PrivateKey,
     mechanisms: Option<Vec<crate::models::KeyMechanism>>,
     tags: Option<Vec<String>>,
 ) -> Result<(), Error<KeysKeyIdPutError>> {
@@ -2220,10 +2254,10 @@ pub async fn keys_key_id_sign_post(
 /// Import a private key into NetHSM and let NetHSM generate a KeyID. The public key will be automatically derived.
 pub async fn keys_post(
     configuration: &configuration::Configuration,
-    body: &str,
+    body: crate::models::PrivateKey,
     mechanisms: Option<Vec<crate::models::KeyMechanism>>,
     tags: Option<Vec<String>>,
-) -> Result<(), Error<KeysPostError>> {
+) -> Result<String, Error<KeysPostError>> {
     let local_var_configuration = configuration;
 
     let local_var_client = &local_var_configuration.client;
@@ -2285,11 +2319,30 @@ pub async fn keys_post(
     let local_var_req = local_var_req_builder.build()?;
     let local_var_resp = local_var_client.execute(local_var_req).await?;
 
+    let response_headers = local_var_resp.headers().clone();
+
     let local_var_status = local_var_resp.status();
     let local_var_content = local_var_resp.text().await?;
 
+    let default = HeaderValue::from_static("unknown");
+
+    let location = response_headers.get("location").unwrap_or(&default);
+
+    // get the id from the logation header value :
+    // location: /api/v1/keys/<id>?mechanisms=ECDSA_Signature
+
+    let key_id = location
+        .to_str()
+        .unwrap_or("")
+        .split('/')
+        .last()
+        .unwrap_or("")
+        .split('?')
+        .next()
+        .unwrap_or("");
+
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        Ok(())
+        Ok(key_id.to_string())
     } else {
         let local_var_entity: Option<KeysPostError> = serde_json::from_str(&local_var_content).ok();
         let local_var_error = ResponseContent {
diff --git a/openapi/src/models/public_key.rs b/openapi/src/models/public_key.rs
index c406ca5..a13b3b2 100644
--- a/openapi/src/models/public_key.rs
+++ b/openapi/src/models/public_key.rs
@@ -17,7 +17,7 @@ pub struct PublicKey {
     #[serde(rename = "restrictions")]
     pub restrictions: Box<crate::models::KeyRestrictions>,
     #[serde(rename = "key")]
-    pub key: Box<crate::models::KeyPublicData>,
+    pub key: Option<Box<crate::models::KeyPublicData>>,
     #[serde(rename = "operations")]
     pub operations: i32,
 }
@@ -34,7 +34,7 @@ impl PublicKey {
             mechanisms,
             r#type,
             restrictions: Box::new(restrictions),
-            key: Box::new(key),
+            key: Some(Box::new(key)),
             operations,
         }
     }
-- 
2.41.0

